#include "stm32f4xx_hal.h"

// Define GPIO pins connected to 74HC595 shift registers
#define DATA_PIN GPIO_PIN_9
#define CLOCK_PIN GPIO_PIN_8
#define LATCH_PIN GPIO_PIN_5

void initShiftRegisters(void);
void writeData(uint16_t data);

//define display patterns and digit selection in hexadecimal
const uint8_t hexPatterns[] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0X80, 0X90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E};
const uint8_t segmentSelect[] = {0xF1,0xF2,0xF4,0xF8};

int main(void) {
    // Initialize the HAL Library
    HAL_Init();

    // Initialize the shift registers
    initShiftRegisters();

    //writeData(0x6, 0);
    //writeData(0x731A);

    while (1) {
      // Display a hexadecimal number
      writeData(0x731A);
    }
}

void initShiftRegisters(void) {
    // Enable the GPIO Clocks
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();

    // Configure the GPIO pins for the shift registers
    GPIO_InitTypeDef GPIO_InitStruct_Data;
    GPIO_InitStruct_Data.Pin = DATA_PIN;
    GPIO_InitStruct_Data.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct_Data.Pull = GPIO_NOPULL;
    GPIO_InitStruct_Data.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct_Data);

    GPIO_InitTypeDef GPIO_InitStruct_Clock;
    GPIO_InitStruct_Clock.Pin = CLOCK_PIN;
    GPIO_InitStruct_Clock.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct_Clock.Pull = GPIO_NOPULL;
    GPIO_InitStruct_Clock.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct_Clock);

    GPIO_InitTypeDef GPIO_InitStruct_Latch;
    GPIO_InitStruct_Latch.Pin = LATCH_PIN;
    GPIO_InitStruct_Latch.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct_Latch.Pull = GPIO_NOPULL;
    GPIO_InitStruct_Latch.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct_Latch);

    // Initialize the shift registers to an initial state
    HAL_GPIO_WritePin(GPIOA, DATA_PIN, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, CLOCK_PIN, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOB, LATCH_PIN, GPIO_PIN_SET);
}

void writeData(uint16_t value) {
  // Iterate over each digit
  for (int digit = 0; digit < 4; digit++) {
    // Extract the character from the 16-bit value
    uint8_t character = (value >> ((3 - digit) * 4)) & 0xF;

    // Pull LATCH low to start the data transfer
    HAL_GPIO_WritePin(GPIOB, LATCH_PIN, GPIO_PIN_RESET);

    // Convert data to 7-segment pattern
    uint8_t segmentData = hexPatterns[character];

    // Shift the data bits out one by one
    for (int i = 0; i < 8; i++) {
      // Set the DATA pin to the value of the current bit
      HAL_GPIO_WritePin(GPIOA, DATA_PIN, (segmentData & 0b10000000) ? GPIO_PIN_SET : GPIO_PIN_RESET);
      
      // Pulse the CLOCK pin to shift the next bit
      HAL_GPIO_WritePin(GPIOA, CLOCK_PIN, GPIO_PIN_SET);
      HAL_GPIO_WritePin(GPIOA, CLOCK_PIN, GPIO_PIN_RESET);

      // Shift the data to the next bit
      segmentData <<= 1;
    }

    // Select the appropriate segment
    uint8_t segmentSelectData = segmentSelect[digit];

    // Shift the segment bits out one by one
    for (int i = 0; i < 8; i++) {
      // Set the DATA pin to the value of the current bit
      HAL_GPIO_WritePin(GPIOA, DATA_PIN, (segmentSelectData & 0b10000000) ? GPIO_PIN_SET : GPIO_PIN_RESET);

      // Pulse the CLOCK pin to shift the next bit
      HAL_GPIO_WritePin(GPIOA, CLOCK_PIN, GPIO_PIN_SET);
      HAL_GPIO_WritePin(GPIOA, CLOCK_PIN, GPIO_PIN_RESET);

      // Shift the data to the next bit
      segmentSelectData <<= 1;
    }

    volatile int m = 0;
    for (volatile int k=0;k<10;k++) { m+=k; }

    // Pull LATCH high to update the display for this digit
    HAL_GPIO_WritePin(GPIOB, LATCH_PIN, GPIO_PIN_SET);
  }
}