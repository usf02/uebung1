#include "stm32f4xx_hal.h"
#include <math.h>

#define DATA_PIN GPIO_PIN_9
#define CLOCK_PIN GPIO_PIN_8
#define LATCH_PIN GPIO_PIN_5

#define VR_A0 GPIO_PIN_0

ADC_HandleTypeDef hadc1;

void Reg_Init();
void sendToSeg(uint8_t segNo, uint8_t hexVal);
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t value);
void displayHex(uint16_t hexValue);
void ADC_Init();
static void SystemClock_Config(void);
void Error_Handler(void);

const uint8_t C_HEX = 0xC6;
const uint8_t TWO_HEX = 0xA4;
const uint8_t P_HEX = 0x8C;
uint8_t hexPatterns[] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0X80, 0X90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E};
const uint8_t segmentSelect[] = {0xF1, 0xF2, 0xF4, 0xF8};

volatile uint16_t adcValue;

int main(void)
{
  HAL_Init();
  SystemClock_Config();
  Reg_Init();
  ADC_Init();

  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    // Initialization Error
    Error_Handler();
  }

  // Configure ADC channel
  ADC_ChannelConfTypeDef sConfig = {0};
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    // Configuration Error
    Error_Handler();
  }

  // Start ADC conversion
  if (HAL_ADC_Start(&hadc1) != HAL_OK)
  {
    // ADC Start Error
    Error_Handler();
  }

  while (1)
  {
    // Wait for ADC conversion to complete
    HAL_ADC_Start(&hadc1);
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
    {
      // Read ADC value
      adcValue = HAL_ADC_GetValue(&hadc1);
      // Display ADC value on 7-segment display
      writeData(adcValue);
    }
  }
}

void Reg_Init()
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  // Configure the GPIO pins for the shift registers
  GPIO_InitTypeDef GPIO_InitStruct_Data;
  GPIO_InitStruct_Data.Pin = DATA_PIN | CLOCK_PIN;
  GPIO_InitStruct_Data.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct_Data.Pull = GPIO_NOPULL;
  GPIO_InitStruct_Data.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct_Data);

  GPIO_InitTypeDef GPIO_InitStruct_Latch;
  GPIO_InitStruct_Latch.Pin = LATCH_PIN;
  GPIO_InitStruct_Latch.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct_Latch.Pull = GPIO_NOPULL;
  GPIO_InitStruct_Latch.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct_Latch);

  // Initialize the pins to an initial state
  HAL_GPIO_WritePin(GPIOA, DATA_PIN, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOA, CLOCK_PIN, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, LATCH_PIN, GPIO_PIN_SET);

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  GPIO_InitStruct.Pin = VR_A0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void ADC_Init() {
  __HAL_RCC_ADC1_CLK_ENABLE();

  // Initialize ADC
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
}

void writeData(uint16_t value)
{
  // Scale ADC value to voltage (assuming a 3.3V reference)
  float voltage = (value / 4095.0) * 3300.0;

  // Extract individual digits
  uint8_t digit1 = voltage / 1000;
  uint8_t digit2 = ((int)voltage / 100) % 10;
  uint8_t digit3 = ((int)voltage / 10) % 10;
  uint8_t digit4 = (int)voltage % 10;

  uint8_t digits[] = {digit1, digit2, digit3, digit4};

  // Iterate over each digit
  for (int digit = 0; digit < 4; digit++) {
    // Pull LATCH low to start the data transfer
    HAL_GPIO_WritePin(GPIOB, LATCH_PIN, GPIO_PIN_RESET);

    // Convert data to 7-segment pattern
    uint8_t segmentData = hexPatterns[digits[digit]];
    if (digit==0)
    {
      segmentData &= 0b01111111;
    }
    

    // Shift the data bits out one by one
    for (int i = 0; i < 8; i++) {
      // Set the DATA pin to the value of the current bit
      HAL_GPIO_WritePin(GPIOA, DATA_PIN, (segmentData & 0b10000000) ? GPIO_PIN_SET : GPIO_PIN_RESET);
      
      // Pulse the CLOCK pin to shift the next bit
      HAL_GPIO_WritePin(GPIOA, CLOCK_PIN, GPIO_PIN_SET);
      HAL_GPIO_WritePin(GPIOA, CLOCK_PIN, GPIO_PIN_RESET);

      // Shift the data to the next bit
      segmentData <<= 1;
    }

    // Select the appropriate segment
    uint8_t segmentSelectData = segmentSelect[digit];

    // Shift the segment bits out one by one
    for (int i = 0; i < 8; i++) {
      // Set the DATA pin to the value of the current bit
      HAL_GPIO_WritePin(GPIOA, DATA_PIN, (segmentSelectData & 0b10000000) ? GPIO_PIN_SET : GPIO_PIN_RESET);

      // Pulse the CLOCK pin to shift the next bit
      HAL_GPIO_WritePin(GPIOA, CLOCK_PIN, GPIO_PIN_SET);
      HAL_GPIO_WritePin(GPIOA, CLOCK_PIN, GPIO_PIN_RESET);

      // Shift the data to the next bit
      segmentSelectData <<= 1;
    }

    volatile int m = 0;
    for (volatile int k=0;k<10;k++) { m+=k; }

    // Pull LATCH high to update the display for this digit
    HAL_GPIO_WritePin(GPIOB, LATCH_PIN, GPIO_PIN_SET);
  }
}

void SysTick_Handler(void)
{
  HAL_IncTick();
}

static void SystemClock_Config(void)
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 360;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  RCC_OscInitStruct.PLL.PLLR = 2;
  
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
  if(ret != HAL_OK)
  {
    while(1) { ; }
  }
  
  /* Activate the OverDrive to reach the 180 MHz Frequency */  
  ret = HAL_PWREx_EnableOverDrive();
  if(ret != HAL_OK)
  {
    while(1) { ; }
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
  
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
  if(ret != HAL_OK)
  {
    while(1) { ; }
  }
}

void Error_Handler(void)
{
  // User-specific error handling code
  while (1)
  {
    // Toggle the LED on and off to indicate an error
    HAL_GPIO_TogglePin(GPIOA, 5);

    // Insert a delay to make the blinking visible
    HAL_Delay(500);
  }
}
